# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'First.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import math
import random


class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1076, 811)
        self.horizontalLayout = QtWidgets.QHBoxLayout(GroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(GroupBox)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.labelOriginalImage = QtWidgets.QLabel(self.tab)
        self.labelOriginalImage.setGeometry(QtCore.QRect(11, 51, 461, 611))
        self.labelOriginalImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelOriginalImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelOriginalImage.setText("")
        self.labelOriginalImage.setScaledContents(True)
        self.labelOriginalImage.setObjectName("labelOriginalImage")
        self.pushButtonBrowse = QtWidgets.QPushButton(self.tab)
        self.pushButtonBrowse.setGeometry(QtCore.QRect(230, 10, 571, 28))
        self.pushButtonBrowse.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.pushButtonBrowse.setObjectName("pushButtonBrowse")
        self.labelFilteredImage = QtWidgets.QLabel(self.tab)
        self.labelFilteredImage.setGeometry(QtCore.QRect(510, 50, 461, 611))
        self.labelFilteredImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelFilteredImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelFilteredImage.setText("")
        self.labelFilteredImage.setScaledContents(True)
        self.labelFilteredImage.setObjectName("labelFilteredImage")
        self.filterInput = QtWidgets.QLineEdit(self.tab)
        self.filterInput.setGeometry(QtCore.QRect(520, 670, 231, 41))
        self.filterInput.setObjectName("filterInput")
        self.pushButtonApply = QtWidgets.QPushButton(self.tab)
        self.pushButtonApply.setGeometry(QtCore.QRect(780, 690, 131, 41))
        self.pushButtonApply.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.pushButtonApply.setObjectName("pushButtonApply")
        self.filterInput_2 = QtWidgets.QLineEdit(self.tab)
        self.filterInput_2.setGeometry(QtCore.QRect(520, 710, 231, 41))
        self.filterInput_2.setObjectName("filterInput_2")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.labelNoisyImage = QtWidgets.QLabel(self.tab_2)
        self.labelNoisyImage.setGeometry(QtCore.QRect(10, 30, 461, 611))
        self.labelNoisyImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage.setText("")
        self.labelNoisyImage.setScaledContents(True)
        self.labelNoisyImage.setObjectName("labelNoisyImage")
        self.labelDenoisedImage = QtWidgets.QLabel(self.tab_2)
        self.labelDenoisedImage.setGeometry(QtCore.QRect(530, 30, 461, 611))
        self.labelDenoisedImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelDenoisedImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelDenoisedImage.setText("")
        self.labelDenoisedImage.setScaledContents(True)
        self.labelDenoisedImage.setObjectName("labelDenoisedImage")
        self.pushButtonSAndPNoise = QtWidgets.QPushButton(self.tab_2)
        self.pushButtonSAndPNoise.setGeometry(QtCore.QRect(130, 670, 281, 61))
        self.pushButtonSAndPNoise.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";\n"
                                                "")
        self.pushButtonSAndPNoise.setObjectName("pushButtonSAndPNoise")
        self.pushButtonDeNoised = QtWidgets.QPushButton(self.tab_2)
        self.pushButtonDeNoised.setGeometry(QtCore.QRect(650, 670, 221, 61))
        self.pushButtonDeNoised.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";\n"
                                              "")
        self.pushButtonDeNoised.setObjectName("pushButtonDeNoised")
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)

        self.retranslateUi(GroupBox)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)
        self.KernelFactorsHint()
        self.pushButtonBrowse.clicked.connect(self.Browse)
        self.pushButtonApply.clicked.connect(self.filterApply)
        self.pushButtonSAndPNoise.clicked.connect(self.addSaltAndPepperNoise)
        self.pushButtonDeNoised.clicked.connect(self.applyDenoise)

    def Browse(self):
        self.fileName, self.file = QFileDialog.getOpenFileName(
            None, "Choose an image",
            "C:/",
            "Images (*.jpg *.bmp *.dcm)")
        if ('.dcm' in self.fileName):
            try:
                # Read and parse a DICOM dataset
                self.dcmHeader = dicom.dcmread(self.fileName)
            # Display data as an image
                self.dcmHeaderArr = self.dcmHeader.pixel_array.astype(float)
                self.rescaledImage = (np.maximum(
                    self.dcmHeaderArr, 0)/self.dcmHeaderArr.max()) * 255.0  # float pixel
                self.finalImage = np.uint8(self.rescaledImage)  # Integer Pixel
                self.finalImage = Image.fromarray(self.finalImage)
                self.finalImage = self.finalImage.convert("L")
                self.finalImage.save('image.jpg')
                self.dynamicPath = os.getcwd()
                self.fileName = self.dynamicPath + '\image.jpg'
                self.pixMap = QPixmap(self.fileName)
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
                self.labelOriginalImage.setScaledContents(True)
            except:
                print('DICOM file missing meta data')
        else:
            try:
                self.oImg = Image.open(self.fileName)
                self.oImg = self.oImg.convert("L")
                self.pixMap = self.oImg.toqpixmap()
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
            except:
                print('Corrupt File')

    def KernelFactorsHint(self):
        self.filterInput.setPlaceholderText(
            'Please enter an odd kernel factor')
        self.filterInput_2.setPlaceholderText('Please enter a factor')

    def filterApply(self):
        self.kernelSize = int(self.filterInput.text())
        self.kernelArray = np.ones((self.kernelSize, self.kernelSize))
        self.sum = int(np.sum(self.kernelArray))
        self.finalKernal = (1/self.sum) * self.kernelArray
        self.img = Image.open(self.fileName)
        self.img = self.img.convert("L")
        self.img_np = np.asarray(self.img)
        # print(self.img_np)
        self.originalRows = self.img_np.shape[0]
        self.originalCols = self.img_np.shape[1]
        self.newRows = self.originalRows + self.kernelSize - 1
        self.newCols = self.originalCols + self.kernelSize - 1
        self.blurredImage = np.zeros((self.newRows, self.newCols))
        self.originalImagePadded = np.zeros((self.newRows, self.newCols))
        self.finalImagePadded = np.zeros((self.newRows, self.newCols))
        self.fir = math.floor(self.kernelSize/2)
        self.originalImagePadded[self.fir:self.newRows -
                                 self.fir, self.fir:self.newCols-self.fir] = self.img_np
        self.blurredImage[self.fir:self.newRows-self.fir,
                          self.fir:self.newCols-self.fir] = self.img_np
        self.finalImagePadded[self.fir:self.newRows-self.fir,
                              self.fir:self.newCols-self.fir] = self.img_np
        self.kernelNew = np.ones((self.kernelSize, self.kernelSize))
        self.kernalMulti = np.zeros((self.kernelSize, self.kernelSize))
        for i in range(self.fir, self.newRows - self.fir):
            for j in range(self.fir, self.newCols - self.fir):
                self.kernalMulti = self.originalImagePadded[i -
                                                            self.fir:self.kernelSize + i, j - self.fir: self.kernelSize + j]
                
                for z in range(self.kernelSize):
                    for k in range(self.kernelSize):
                        self.kernelNew[z][k] = self.finalKernal[z][k] * \
                            self.kernalMulti[z][k]
                        # print(np.sum(self.kernalMulti))
                self.blurredImage[i][j] = np.sum(self.kernelNew)
        # print(self.blurredImage)
        # print(self.originalImagePadded)
        self.originalImagePadded = self.originalImagePadded - self.blurredImage
        self.kFactorize = int(self.filterInput_2.text())
        self.originalImagePadded = self.kFactorize * self.originalImagePadded
        self.finalImagePadded = self.originalImagePadded + self.finalImagePadded
        for i in range(self.finalImagePadded.shape[0]):
            for j in range(self.finalImagePadded.shape[1]):
                if self.finalImagePadded[i][j] < 0:
                    self.finalImagePadded[i][j] = 0
                elif self.finalImagePadded[i][j] > 255:
                    self.finalImagePadded[i][j] = 255
                else:
                    pass
        self.finalFinal = np.zeros((self.originalRows, self.originalCols))
        self.finalFinal = self.finalImagePadded[self.fir: self.newRows -
                                                self.fir, self.fir: self.newCols - self.fir]
        self.finalPixels = Image.fromarray(np.uint8(self.finalFinal))
        self.qimg = self.finalPixels.toqpixmap()
        self.labelFilteredImage.clear()
        self.labelFilteredImage.setPixmap(self.qimg)
        #print(self.finalFinal)

    def addSaltAndPepperNoise(self):
        # Getting the dimensions of the image_copy
        row = self.img_np.shape[0]
        col = self.img_np.shape[1]
        # To NOT CHANGE IN THE ORIGINAL IMAGE
        self.image_copy = self.img_np.copy()
        # print(image_copy)

        # Randomly pick some pixels in the
        # image_copy for coloring them white
        # Pick a random number between 300 and 10000
        number_of_pixels = random.randint(300, 10000)
        for i in range(number_of_pixels):
            # Pick a random y coordinate
            y_coord = random.randint(0, row - 1)

            # Pick a random x coordinate
            x_coord = random.randint(0, col - 1)

            # Color that pixel to white
            self.image_copy[y_coord][x_coord] = 255

        # Randomly pick some pixels in
        # the image_copy for coloring them black
        # Pick a random number between 300 and 10000
        number_of_pixels = random.randint(300, 10000)
        for i in range(number_of_pixels):
            # Pick a random y coordinate
            y_coord = random.randint(0, row - 1)

            # Pick a random x coordinate
            x_coord = random.randint(0, col - 1)

            # Color that pixel to black
            self.image_copy[y_coord][x_coord] = 0
        self.finalNoisy = Image.fromarray(np.uint8(self.image_copy))
        self.qimgNoisy = self.finalNoisy.toqpixmap()
        self.labelNoisyImage.clear()
        self.labelNoisyImage.setPixmap(self.qimgNoisy)
        # print(image_copy)

    def applyDenoise(self):

        filter_size = 3
        data = np.array(self.image_copy)
        temp = []
        indexer = filter_size // 2
        data_final = []
        data_final = np.zeros((len(data), len(data[0])))
        #print(len(data), len(data[0]))
        for i in range(len(data)):

            for j in range(len(data[0])):

                for z in range(filter_size):
                    if i + z - indexer < 0 or i + z - indexer > len(data) - 1:
                        for c in range(filter_size):
                            temp.append(0)
                    else:
                        if j + z - indexer < 0 or j + indexer > len(data[0]) - 1:
                            temp.append(0)
                        else:
                            for k in range(filter_size):
                                temp.append(
                                    data[i + z - indexer][j + k - indexer])

                temp = self.merge_sort(temp)
                data_final[i][j] = temp[len(temp) // 2]
                temp = []
        self.finalDeNoisy = Image.fromarray(np.uint8(data_final))
        self.qimgDeNoisy = self.finalDeNoisy.toqpixmap()
        self.labelDenoisedImage.clear()
        self.labelDenoisedImage.setPixmap(self.qimgDeNoisy)
        # print(data_final)

    def merge(self, left, right):
        # If the first array is empty, then nothing needs
        # to be merged, and you can return the second array as the result
        if len(left) == 0:
            return right

        # If the second array is empty, then nothing needs
        # to be merged, and you can return the first array as the result
        if len(right) == 0:
            return left

        result = []
        index_left = index_right = 0

        # Now go through both arrays until all the elements
        # make it into the resultant array
        while len(result) < len(left) + len(right):
            # The elements need to be sorted to add them to the
            # resultant array, so you need to decide whether to get
            # the next element from the first or the second array
            if left[index_left] <= right[index_right]:
                result.append(left[index_left])
                index_left += 1
            else:
                result.append(right[index_right])
                index_right += 1

            # If you reach the end of either array, then you can
            # add the remaining elements from the other array to
            # the result and break the loop
            if index_right == len(right):
                result += left[index_left:]
                break

            if index_left == len(left):
                result += right[index_right:]
                break

        return result

    def merge_sort(self, array):
        # If the input array contains fewer than two elements,
        # then return it as the result of the function
        if len(array) < 2:
            return array

        midpoint = len(array) // 2

        # Sort the array by recursively splitting the input
        # into two equal halves, sorting each half and merging them
        # together into the final result
        return self.merge(
            left=self.merge_sort(array[:midpoint]),
            right=self.merge_sort(array[midpoint:]))

    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.pushButtonBrowse.setText(_translate("GroupBox", "Browse"))
        self.pushButtonApply.setText(_translate("GroupBox", "Apply Filter"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab), _translate("GroupBox", "Tab 1"))
        self.pushButtonSAndPNoise.setText(_translate(
            "GroupBox", "Salt And Pepper Noisy Image"))
        self.pushButtonDeNoised.setText(
            _translate("GroupBox", "De-Noised Image"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_2), _translate("GroupBox", "Tab 2"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
