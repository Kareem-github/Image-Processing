# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'First.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from __future__ import print_function
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT as NavigationToolbar)
import random
import matplotlib.image as img


class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1180, 815)
        self.browseButton = QtWidgets.QPushButton(GroupBox)
        self.browseButton.setGeometry(QtCore.QRect(60, 20, 1011, 28))
        self.browseButton.setObjectName("browseButton")
        self.originalImageWidget = QtWidgets.QLabel(GroupBox)
        self.originalImageWidget.setGeometry(QtCore.QRect(60, 60, 471, 341))
        self.originalImageWidget.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.originalImageWidget.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.originalImageWidget.setText("")
        self.originalImageWidget.setScaledContents(True)
        self.originalImageWidget.setObjectName("originalImageWidget")
        self.originalHistogram = MplWidget(GroupBox)
        self.originalHistogram.setGeometry(QtCore.QRect(550, 60, 541, 341))
        self.originalHistogram.setObjectName("originalHistogram")
        self.equalizedImageWidget = QtWidgets.QLabel(GroupBox)
        self.equalizedImageWidget.setGeometry(QtCore.QRect(60, 450, 471, 341))
        self.equalizedImageWidget.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.equalizedImageWidget.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.equalizedImageWidget.setText("")
        self.equalizedImageWidget.setScaledContents(True)
        self.equalizedImageWidget.setObjectName("equalizedImageWidget")
        self.applyEqualizationButton = QtWidgets.QPushButton(GroupBox)
        self.applyEqualizationButton.setGeometry(QtCore.QRect(60, 410, 1021, 28))
        self.applyEqualizationButton.setObjectName("applyEqualizationButton")
        self.originalHistogram_2 = MplWidget(GroupBox)
        self.originalHistogram_2.setGeometry(QtCore.QRect(550, 450, 541, 341))
        self.originalHistogram_2.setObjectName("originalHistogram_2")

        self.retranslateUi(GroupBox)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)
        
        self.browseButton.clicked.connect(self.Browse)
        self.applyEqualizationButton.clicked.connect(self.imageEqualization)
    
    def Browse(self):
        self.clearData()
        self.fileName, self.file = QFileDialog.getOpenFileName(
            None, "Choose an image",
            "C:/",
            "Images (*.jpg *.bmp *.dcm)")
        if ('.dcm' in self.fileName):
            try:
                # Read and parse a DICOM dataset
                self.dcmHeader = dicom.dcmread(self.fileName)
                # print(self.dcmHeader)
            # Display data as an image
                self.dcmHeaderArr = self.dcmHeader.pixel_array.astype(float)
                self.rescaledImage = (np.maximum(
                    self.dcmHeaderArr, 0)/self.dcmHeaderArr.max()) * 255.0  # float pixel
                self.finalImage = np.uint8(self.rescaledImage)  # Integer Pixel
                self.finalImage = Image.fromarray(self.finalImage)
                self.finalImage = self.finalImage.convert("L")
                self.finalImage.save('image.jpg')
                self.dynamicPath = os.getcwd()
                self.fileName = self.dynamicPath + '\image.jpg'
                self.pixMap = QPixmap(self.fileName)
                self.originalImageWidget.setPixmap(self.pixMap)
                #self.plotting()
                # print(self.dcmHeader)
            except: 
                print('DICOM file missing meta data')
        else:
            try:
                self.img = Image.open(self.fileName)
                self.img = self.img.convert("L")
                self.img = self.img.toqpixmap()
                self.pixMap = QPixmap(self.img)
                self.originalImageWidget.setPixmap(self.pixMap)
                #self.plotting()
            except:
                print('Corrupt File')

    # def plotting(self):
    #     testImage = img.imread(self.fileName)
    #     self.originalHistogram.canvas.axes.clear()
    #     self.originalHistogram.canvas.axes.imshow(testImage)
    #     self.originalHistogram.canvas.draw()
    
    def clearData(self):
        self.originalImageWidget.clear()
        self.equalizedImageWidget.clear()

    def imageEqualization(self):
        self.img = Image.open(self.fileName)
        self.imgray = self.img.convert(mode="L")
        self.img_array = np.asarray(self.imgray)
        histogram_array = np.bincount(self.img_array.flatten(), minlength=256)
        #print(histogram_array)
        # normalize
        num_pixels = np.sum(histogram_array)
        histogram_array = histogram_array/num_pixels
        self.originalHistogram.canvas.axes.clear()
        self.originalHistogram.canvas.axes.bar(range(256),histogram_array)
        self.originalHistogram.canvas.draw()
        # normalized cumulative histogram
        chistogram_array = np.cumsum(histogram_array)
        #print(chistogram_array)
        """
        STEP 2: Pixel mapping lookup table
        """
        transform_map = np.floor(255 * chistogram_array).astype(np.uint8)
        """
        STEP 3: Transformation
        """
        # flatten image array into 1D list
        img_list = list(self.img_array.flatten())

        # transform pixel values to equalize
        eq_img_list = [transform_map[p] for p in img_list]
        eq_img_array = np.reshape(np.asarray(
            eq_img_list), self.img_array.shape)
        
        ######################################
        # WRITE EQUALIZED IMAGE TO FILE
        ######################################
        # convert NumPy array to pillow Image and write to file
        self.eq_img = Image.fromarray(eq_img_array, mode="L")
        eq_img_arrayf = np.asarray(self.eq_img)
        histogram_farray = np.bincount(eq_img_arrayf.flatten(), minlength=256)
        num_fpixels = np.sum(histogram_farray)
        histogram_farray = histogram_farray/num_fpixels
        self.originalHistogram_2.canvas.axes.clear()
        self.originalHistogram_2.canvas.axes.bar(range(256),histogram_farray)
        self.originalHistogram_2.canvas.draw()
        self.eq_img = self.eq_img.toqpixmap()
        self.eq_pixMap = QPixmap(self.eq_img)
        self.equalizedImageWidget.setPixmap(self.eq_pixMap)
        
    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.browseButton.setText(_translate("GroupBox", "Browse"))
        self.applyEqualizationButton.setText(_translate("GroupBox", "Apply Equalization"))
from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
