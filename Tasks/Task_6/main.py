# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'First.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from __future__ import print_function
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import math
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT as NavigationToolbar)
import random
import matplotlib.image as img
#from _future_ import print_function

class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1191, 774)
        self.horizontalLayout = QtWidgets.QHBoxLayout(GroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(GroupBox)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.pushButtonBrowse = QtWidgets.QPushButton(self.tab)
        self.pushButtonBrowse.setGeometry(QtCore.QRect(290, 0, 571, 28))
        self.pushButtonBrowse.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.pushButtonBrowse.setObjectName("pushButtonBrowse")
        self.labelOriginalImage = QtWidgets.QLabel(self.tab)
        self.labelOriginalImage.setGeometry(QtCore.QRect(0, 40, 511, 671))
        self.labelOriginalImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelOriginalImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelOriginalImage.setText("")
        self.labelOriginalImage.setScaledContents(True)
        self.labelOriginalImage.setObjectName("labelOriginalImage")
        self.graphicsView_3 = MplWidget(self.tab)
        self.graphicsView_3.setGeometry(QtCore.QRect(530, 40, 621, 321))
        self.graphicsView_3.setObjectName("graphicsView_3")
        self.graphicsView_4 = MplWidget(self.tab)
        self.graphicsView_4.setGeometry(QtCore.QRect(530, 380, 621, 321))
        self.graphicsView_4.setObjectName("graphicsView_4")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.graphicsView = MplWidget(self.tab_2)
        self.graphicsView.setGeometry(QtCore.QRect(10, 10, 491, 481))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView_2 = MplWidget(self.tab_2)
        self.graphicsView_2.setGeometry(QtCore.QRect(590, 10, 491, 481))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)

        self.retranslateUi(GroupBox)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)
        
        self.pushButtonBrowse.clicked.connect(self.Browse)
        
    def Browse(self):
        self.fileName, self.file = QFileDialog.getOpenFileName(
            None, "Choose an image",
            "C:/",
            "Images (*.jpg *.bmp *.dcm)")
        if ('.dcm' in self.fileName):
            try:
                # Read and parse a DICOM dataset
                self.dcmHeader = dicom.dcmread(self.fileName)
            # Display data as an image
                self.dcmHeaderArr = self.dcmHeader.pixel_array.astype(float)
                self.rescaledImage = (np.maximum(
                    self.dcmHeaderArr, 0)/self.dcmHeaderArr.max()) * 255.0  # float pixel
                self.finalImage = np.uint8(self.rescaledImage)  # Integer Pixel
                self.finalImage = Image.fromarray(self.finalImage)
                self.finalImage = self.finalImage.convert("L")
                self.finalImage.save('image.jpg')
                self.dynamicPath = os.getcwd()
                self.fileName = self.dynamicPath + '\image.jpg'
                self.pixMap = QPixmap(self.fileName)
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
                self.labelOriginalImage.setScaledContents(True)
            except:
                print('DICOM file missing meta data')
        else:
            try:
                self.finalImage = Image.open(self.fileName)
                self.finalImage = self.finalImage.convert("L")
                self.pixMap = self.finalImage.toqpixmap()
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
            except:
                print('Corrupt File')
        self.Fourier()
                
                
    def Fourier(self):
        self.imgArr = np.asarray(self.finalImage)
        self.fftArr = np.fft.fft2(self.imgArr)
        # self.fftArr = np.fft.fftshift(np.fft.fft2(self.imgArr))
        self.realArr = self.fftArr.real
        #print(self.realArr)
        self.imagArr = self.fftArr.imag      # Imaginary Part
        
        self.magArr = np.sqrt(self.realArr**2+self.imagArr**2)    
        self.phaseArr = np.arctan2(self.imagArr,self.realArr)
        
        self.graphicsView_3.canvas.axes.clear()
        self.graphicsView_3.canvas.axes.imshow(self.magArr, interpolation = "None", cmap = 'gray', vmin = 0 )
        self.graphicsView_3.canvas.draw()
        
        self.graphicsView_4.canvas.axes.clear()
        self.graphicsView_4.canvas.axes.imshow(self.phaseArr, interpolation = "None", cmap = 'gray', vmin = 0 )
        self.graphicsView_4.canvas.draw()

        
        self.logMagArr = np.log(self.magArr+1)
        self.logPhaseArr = np.log(self.phaseArr+2*math.pi)
        
        self.graphicsView.canvas.axes.clear()
        self.graphicsView.canvas.axes.imshow(self.logMagArr, interpolation = "None", cmap = 'gray', vmin = 0 )
        self.graphicsView.canvas.draw()
        
        self.graphicsView_2.canvas.axes.clear()
        self.graphicsView_2.canvas.axes.imshow(self.logPhaseArr, interpolation = "None", cmap = 'gray', vmin = 0 )
        self.graphicsView_2.canvas.draw()
        

    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.pushButtonBrowse.setText(_translate("GroupBox", "Browse"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("GroupBox", "Tab 1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("GroupBox", "Tab 2"))
from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
