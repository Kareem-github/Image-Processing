# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Task_7.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import math


class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1191, 722)
        self.horizontalLayout = QtWidgets.QHBoxLayout(GroupBox)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(GroupBox)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.pushButtonBrowse = QtWidgets.QPushButton(self.tab)
        self.pushButtonBrowse.setGeometry(QtCore.QRect(230, 10, 571, 28))
        self.pushButtonBrowse.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";")
        self.pushButtonBrowse.setObjectName("pushButtonBrowse")
        self.labelOriginalImage = QtWidgets.QLabel(self.tab)
        self.labelOriginalImage.setGeometry(QtCore.QRect(0, 60, 351, 491))
        self.labelOriginalImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelOriginalImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelOriginalImage.setText("")
        self.labelOriginalImage.setScaledContents(True)
        self.labelOriginalImage.setObjectName("labelOriginalImage")
        self.lineEditKernelSize = QtWidgets.QLineEdit(self.tab)
        self.lineEditKernelSize.setGeometry(QtCore.QRect(80, 600, 201, 31))
        self.lineEditKernelSize.setObjectName("lineEditKernelSize")
        self.labelFourierFilteredImage = QtWidgets.QLabel(self.tab)
        self.labelFourierFilteredImage.setGeometry(
            QtCore.QRect(380, 60, 361, 501))
        self.labelFourierFilteredImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelFourierFilteredImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelFourierFilteredImage.setText("")
        self.labelFourierFilteredImage.setScaledContents(True)
        self.labelFourierFilteredImage.setObjectName(
            "labelFourierFilteredImage")
        self.labelSubtractedImage = QtWidgets.QLabel(self.tab)
        self.labelSubtractedImage.setGeometry(QtCore.QRect(750, 60, 351, 501))
        self.labelSubtractedImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelSubtractedImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelSubtractedImage.setText("")
        self.labelSubtractedImage.setScaledContents(True)
        self.labelSubtractedImage.setObjectName("labelSubtractedImage")
        self.pushButtonApply = QtWidgets.QPushButton(self.tab)
        self.pushButtonApply.setGeometry(QtCore.QRect(320, 600, 93, 28))
        self.pushButtonApply.setObjectName("pushButtonApply")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.labelPatternedImage = QtWidgets.QLabel(self.tab_2)
        self.labelPatternedImage.setGeometry(QtCore.QRect(60, 50, 441, 531))
        self.labelPatternedImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelPatternedImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelPatternedImage.setText("")
        self.labelPatternedImage.setScaledContents(True)
        self.labelPatternedImage.setObjectName("labelPatternedImage")
        self.labelFilteredImage = QtWidgets.QLabel(self.tab_2)
        self.labelFilteredImage.setGeometry(QtCore.QRect(560, 50, 441, 531))
        self.labelFilteredImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelFilteredImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelFilteredImage.setText("")
        self.labelFilteredImage.setScaledContents(True)
        self.labelFilteredImage.setObjectName("labelFilteredImage")
        self.pushButtonApplyBonus = QtWidgets.QPushButton(self.tab_2)
        self.pushButtonApplyBonus.setGeometry(QtCore.QRect(450, 610, 171, 41))
        self.pushButtonApplyBonus.setObjectName("pushButtonApplyBonus")
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout.addWidget(self.tabWidget)

        self.retranslateUi(GroupBox)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)

        self.pushButtonBrowse.clicked.connect(self.Browse)
        self.pushButtonApply.clicked.connect(self.FourierFilter)
        self.pushButtonApplyBonus.clicked.connect(self.bouns)

    def Browse(self):
        self.fileName, self.file = QFileDialog.getOpenFileName(
            None, "Choose an image",
            "C:/",
            "Images (*.jpg *.bmp *.dcm)")
        if ('.dcm' in self.fileName):
            try:
                # Read and parse a DICOM dataset
                self.dcmHeader = dicom.dcmread(self.fileName)
            # Display data as an image
                self.dcmHeaderArr = self.dcmHeader.pixel_array.astype(float)
                self.rescaledImage = (np.maximum(
                    self.dcmHeaderArr, 0)/self.dcmHeaderArr.max()) * 255.0  # float pixel
                self.finalImage = np.uint8(self.rescaledImage)  # Integer Pixel
                self.finalImage = Image.fromarray(self.finalImage)
                self.finalImage = self.finalImage.convert("L")
                self.finalImage.save('image.jpg')
                self.dynamicPath = os.getcwd()
                self.fileName = self.dynamicPath + '\image.jpg'
                self.pixMap = QPixmap(self.fileName)
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
                self.labelOriginalImage.setScaledContents(True)
            except:
                print('DICOM file missing meta data')
        else:
            try:
                self.finalImage = Image.open(self.fileName)
                self.finalImage = self.finalImage.convert("L")
                self.pixMap = self.finalImage.toqpixmap()
                self.labelOriginalImage.clear
                self.labelOriginalImage.setPixmap(self.pixMap)
            except:
                print('Corrupt File')

    def FourierFilter(self):
        self.kernelSize = int(self.lineEditKernelSize.text())
        self.kernelArray = np.ones((self.kernelSize, self.kernelSize))
        self.sum = int(np.sum(self.kernelArray))
        self.originalImageArray = np.asarray(self.finalImage)
        self.originalRows = self.originalImageArray.shape[0]
        self.originalCols = self.originalImageArray.shape[1]
        self.kernelPadded = np.zeros((self.originalRows, self.originalCols))
        self.fir = int(self.originalRows/2) - int(self.kernelArray.shape[0]/2)
        self.fic = int(self.originalCols/2) - int(self.kernelArray.shape[0]/2)
        self.finalSmallKernal = np.ones(
            (self.originalRows - 2 * self.fir, self.originalCols - 2 * self.fic))
        self.finalSmallKernal = (1/self.sum) * self.finalSmallKernal
        self.kernelPadded[self.fir:self.originalRows -
                          self.fir, self.fic:self.originalCols-self.fic] = self.finalSmallKernal

        self.originalImageFourier = np.fft.fft2(self.originalImageArray)
        self.originalImageFourier = np.fft.fftshift(self.originalImageFourier)
        self.kernalFourier = np.fft.fft2(self.kernelPadded)
        self.kernalFourier = np.fft.fftshift(self.kernalFourier)
        self.fourierMultiplied = self.originalImageFourier * self.kernalFourier
        self.result = np.fft.ifftshift(self.fourierMultiplied)
        self.result = np.fft.ifft2(self.result)
        self.result = np.fft.fftshift(self.result)
        self.result = np.abs(self.result)
        self.resultPixmap = Image.fromarray(np.uint8(self.result))
        self.qimg = self.resultPixmap.toqpixmap()
        self.labelFourierFilteredImage.clear()
        self.labelFourierFilteredImage.setPixmap(self.qimg)
        self.blurredSpatialResult = self.spatialFilter()
        self.result = self.result - self.blurredSpatialResult
        for j in range(0, self.result.shape[0]):
            for i in range(0, self.result.shape[1]):
                if self.result[j, i] > 255:
                    self.result[j, i] = 255
                elif self.result[j, i] < 0:
                    self.result[j, i] = 0

        self.subtractedPixmap = Image.fromarray(np.uint8(self.result))
        self.subimg = self.subtractedPixmap.toqpixmap()
        self.labelSubtractedImage.clear()
        self.labelSubtractedImage.setPixmap(self.subimg)

    def spatialFilter(self):
        self.kernelSize = int(self.lineEditKernelSize.text())
        self.kernelArray = np.ones((self.kernelSize, self.kernelSize))
        self.sum = int(np.sum(self.kernelArray))
        self.finalKernal = (1/self.sum) * self.kernelArray
        self.img = Image.open(self.fileName)
        self.img = self.img.convert("L")
        self.img_np = np.asarray(self.img)
        self.originalRows = self.img_np.shape[0]
        self.originalCols = self.img_np.shape[1]
        self.newRows = self.originalRows + self.kernelSize - 1
        self.newCols = self.originalCols + self.kernelSize - 1
        self.blurredImage = np.zeros((self.newRows, self.newCols))
        self.originalImagePadded = np.zeros((self.newRows, self.newCols))
        self.finalImagePadded = np.zeros((self.newRows, self.newCols))
        self.fir = math.floor(self.kernelSize/2)
        self.originalImagePadded[self.fir:self.newRows -
                                 self.fir, self.fir:self.newCols-self.fir] = self.img_np
        self.blurredImage[self.fir:self.newRows-self.fir,
                          self.fir:self.newCols-self.fir] = self.img_np
        self.finalImagePadded[self.fir:self.newRows-self.fir,
                              self.fir:self.newCols-self.fir] = self.img_np
        self.kernelNew = np.ones((self.kernelSize, self.kernelSize))
        self.kernalMulti = np.zeros((self.kernelSize, self.kernelSize))
        for i in range(self.fir, self.newRows - self.fir):
            for j in range(self.fir, self.newCols - self.fir):
                self.kernalMulti = self.originalImagePadded[i -
                                                            self.fir:self.kernelSize + i, j - self.fir: self.kernelSize + j]
                for z in range(self.kernelSize):
                    for k in range(self.kernelSize):
                        self.kernelNew[z][k] = self.finalKernal[z][k] * \
                            self.kernalMulti[z][k]
                self.blurredImage[i][j] = np.sum(self.kernelNew)
        self.blurredImage = self.blurredImage[self.fir: self.newRows -
                                              self.fir, self.fir: self.newCols - self.fir]
        self.resultPixmap = Image.fromarray(np.uint8(self.blurredImage))
        self.qimg = self.resultPixmap.toqpixmap()
        self.labelOriginalImage.clear()
        self.labelOriginalImage.setPixmap(self.qimg)
        return self.blurredImage

    def notch_reject_filter(self, shape, d0=9, u_k=0, v_k=0):
        originalRows, originalCols = shape
    # Initialize filter with zeros
        notchFilter = np.zeros((originalRows, originalCols))

        # Traverse through filter
        for u in range(0, originalRows):
            for v in range(0, originalCols):
                # Get euclidean distance from point D(u,v) to the center
                distance_uv = np.sqrt(
                    (u - originalRows / 2 + u_k) ** 2 + (v - originalCols / 2 + v_k) ** 2)
                distance_muv = np.sqrt((u - originalRows / 2 - u_k) ** 2 +
                                       (v - originalCols / 2 - v_k) ** 2)

                if distance_uv <= d0 or distance_muv <= d0:
                    # put zeros in noisy pixels coordinates
                    notchFilter[u, v] = 0.0
                else:
                    # else put ones
                    notchFilter[u, v] = 1.0

        return notchFilter

    def bouns(self):
        self.noPixmap = QtGui.QPixmap(
            r"C:\Users\Kareem\Pictures\PatternedImage")
        self.labelPatternedImage.clear()
        self.labelPatternedImage.setPixmap(self.noPixmap)

        self.noisyImage = Image.open(
            r"C:\Users\Kareem\Pictures\PatternedImage.jpeg")
        self.noisyImage = self.noisyImage.convert("L")
        self.noisyArray = np.asarray(self.noisyImage)
        f = np.fft.fft2(self.noisyArray)
        fshift = np.fft.fftshift(f)
        self.phase_spectrumR = np.angle(fshift)
        self.magnitude_spectrum = 20*np.log(np.abs(fshift))

        img_shape = self.noisyArray.shape

        H1 = self.notch_reject_filter(img_shape, 4, 38, 30)
        # Remove the noise from known areas in the image anf apply filtering
        H2 = self.notch_reject_filter(img_shape, 4, -42, 27)
        H3 = self.notch_reject_filter(img_shape, 2, 80, 30)
        H4 = self.notch_reject_filter(img_shape, 2, -82, 28)

        NotchFilter = H1*H2*H3*H4
        NotchRejectCenter = fshift * NotchFilter
        NotchReject = np.fft.ifftshift(NotchRejectCenter)
        # Compute the inverse DFT of the result
        inverse_NotchReject = np.fft.ifft2(NotchReject)

        self.resultUnPatterned = np.abs(
            inverse_NotchReject)              # Get the absoulte

        self.resultedPixmap = Image.fromarray(np.uint8(self.resultUnPatterned))
        self.resimg = self.resultedPixmap.toqpixmap()
        self.labelFilteredImage.clear()
        self.labelFilteredImage.setPixmap(self.resimg)

    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.pushButtonBrowse.setText(_translate("GroupBox", "Browse"))
        self.pushButtonApply.setText(_translate("GroupBox", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab), _translate("GroupBox", "Tab 1"))
        self.pushButtonApplyBonus.setText(_translate("GroupBox", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.tab_2), _translate("GroupBox", "Tab 2"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
