# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'm3rfsh.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import math
import cv2

class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1021, 847)
        self.labelOriginalCircle = QtWidgets.QLabel(GroupBox)
        self.labelOriginalCircle.setGeometry(QtCore.QRect(10, 20, 301, 261))
        self.labelOriginalCircle.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelOriginalCircle.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelOriginalCircle.setText("")
        self.labelOriginalCircle.setScaledContents(True)
        self.labelOriginalCircle.setObjectName("labelOriginalCircle")
        self.graphicsViewHistogram = MplWidget(GroupBox)
        self.graphicsViewHistogram.setGeometry(QtCore.QRect(50, 460, 491, 301))
        self.graphicsViewHistogram.setObjectName("graphicsViewHistogram")
        self.labelNoisyCircle = QtWidgets.QLabel(GroupBox)
        self.labelNoisyCircle.setGeometry(QtCore.QRect(330, 20, 321, 261))
        self.labelNoisyCircle.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyCircle.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyCircle.setText("")
        self.labelNoisyCircle.setScaledContents(True)
        self.labelNoisyCircle.setObjectName("labelNoisyCircle")
        self.pushButtonAddNoise = QtWidgets.QPushButton(GroupBox)
        self.pushButtonAddNoise.setGeometry(QtCore.QRect(450, 300, 111, 28))
        self.pushButtonAddNoise.setObjectName("pushButtonAddNoise")
        self.lineEditMean = QtWidgets.QLineEdit(GroupBox)
        self.lineEditMean.setGeometry(QtCore.QRect(600, 610, 171, 21))
        self.lineEditMean.setObjectName("lineEditMean")
        self.lineEditVariance = QtWidgets.QLineEdit(GroupBox)
        self.lineEditVariance.setGeometry(QtCore.QRect(600, 640, 171, 21))
        self.lineEditVariance.setObjectName("lineEditVariance")
        self.pushButtonSelect = QtWidgets.QPushButton(GroupBox)
        self.pushButtonSelect.setGeometry(QtCore.QRect(40, 350, 211, 31))
        self.pushButtonSelect.setObjectName("pushButtonSelect")
        self.labelNoisyCircle_2 = QtWidgets.QLabel(GroupBox)
        self.labelNoisyCircle_2.setGeometry(QtCore.QRect(670, 20, 321, 261))
        self.labelNoisyCircle_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyCircle_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyCircle_2.setText("")
        self.labelNoisyCircle_2.setScaledContents(True)
        self.labelNoisyCircle_2.setObjectName("labelNoisyCircle_2")
        self.pushButtonAddNoise_2 = QtWidgets.QPushButton(GroupBox)
        self.pushButtonAddNoise_2.setGeometry(QtCore.QRect(760, 300, 111, 28))
        self.pushButtonAddNoise_2.setObjectName("pushButtonAddNoise_2")
        self.pushButtonSelect_2 = QtWidgets.QPushButton(GroupBox)
        self.pushButtonSelect_2.setGeometry(QtCore.QRect(370, 360, 211, 31))
        self.pushButtonSelect_2.setObjectName("pushButtonSelect_2")
        self.pushButtonSelect_3 = QtWidgets.QPushButton(GroupBox)
        self.pushButtonSelect_3.setGeometry(QtCore.QRect(710, 360, 211, 31))
        self.pushButtonSelect_3.setObjectName("pushButtonSelect_3")

        self.retranslateUi(GroupBox)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)
        self.createPhantom()
        self.pushButtonAddNoise.clicked.connect(self.add_gaussian_noise)
        self.pushButtonAddNoise_2.clicked.connect(self.add_uniform_noise)
        self.pushButtonSelect.clicked.connect(self.selectROIFromOriginal)
        self.pushButtonSelect_2.clicked.connect(self.selectROIFromGaussian)
        self.pushButtonSelect_3.clicked.connect(self.selectROIFromUniform)        
    def createPhantom(self):
        # 50, 150, 250
        x = np.linspace(-10, 10, 256)
        # create 1-D array from -10 to 10
        y = np.linspace(-10, 10, 256)
        # convert the 1-D to 2-D array
        x, y = np.meshgrid(x, y)
        x_0 = 0
        y_0 = 0
        # 2-D array from the circle equation
        circle = np.sqrt((x-x_0)**2+(y-y_0)**2)

        r = 5                                             # radius of the circle
        for x in range(256):
            for y in range(256):
                if circle[x, y] < r:
                    circle[x, y] = 100
                elif circle[x, y] >= r:
                    # circle of size 256 * 256 with intesity of 100 in the center (r =5)
                    circle[x, y] = 0

        # square of size 256 * 256 with intesity of 50
        squares = np.full((256, 256), 50)
        for i in range(35, 221):
            for j in range(35, 221):                      # smaller sqaure of intesity 150
                squares[i, j] = 150
        # pixels of intesity 150 + pixels of intesity 100 generate the circle pixels of intesity 250
        self.originalPhantom = squares + circle
        self.resultPixmap = Image.fromarray(np.uint8(self.originalPhantom))
        self.qimg = self.resultPixmap.toqpixmap()
        self.labelOriginalCircle.clear()
        self.labelOriginalCircle.setPixmap(self.qimg)
        return self.originalPhantom
        
    def add_gaussian_noise(self):
    
        phantom_img = self.createPhantom()
        # np.random.normal(mean, standard deviation, (row,col))
        self.gaussian_noise = np.random.normal(0,5,(256,256))
        noisy_phantom = phantom_img + self.gaussian_noise
        for j in range(0, noisy_phantom.shape[0]):                     # Clipping
            for i in range(0, noisy_phantom.shape[1]):
                if noisy_phantom[j, i] > 255:
                    noisy_phantom[j, i] = 255
                elif noisy_phantom[j, i] < 0:
                    noisy_phantom[j, i] = 0

        self.resultPixmap = Image.fromarray(np.uint8(noisy_phantom))
        self.qimg = self.resultPixmap.toqpixmap()
        self.labelNoisyCircle.clear()
        self.labelNoisyCircle.setPixmap(self.qimg)
        return noisy_phantom

    def add_uniform_noise(self):
        # uniform noise a = -10 & b = 10
        phantom_img = self.createPhantom()
        a = -10
        b = 10
        mean = (a + b)/ 2
        std_dev = np.sqrt(((b - a) ** 2)/ 12)       # Calculate std dev in uniform noise
        # np.random.normal(mean, standard deviation, (row, col))
        self.uniform_noise = np.random.normal(mean, std_dev,(256,256))
        noisy_phantom = phantom_img + self.uniform_noise
        for j in range(0, noisy_phantom.shape[0]):       # Clipping
            for i in range(0, noisy_phantom.shape[1]):
                if noisy_phantom[j, i] > 255:
                    noisy_phantom[j, i] = 255
                elif noisy_phantom[j, i] < 0:
                    noisy_phantom[j, i] = 0
        
        self.resultPixmap = Image.fromarray(np.uint8(noisy_phantom))
        self.qimg = self.resultPixmap.toqpixmap()
        self.labelNoisyCircle_2.clear()
        self.labelNoisyCircle_2.setPixmap(self.qimg)
        return noisy_phantom
        
        
    def selectROIFromOriginal(self):
        arr = self.createPhantom()
        savedImg = cv2.imwrite('m3rfsh.jpg', arr)
        img = cv2.imread('m3rfsh.jpg',1)
        # Select ROI
        r = cv2.selectROI("select the area", np.uint8(arr))
        
        # Crop image
        cropped_image = img[int(r[1]):int(r[1]+r[3]),
                            int(r[0]):int(r[0]+r[2])]
        #print(cropped_image)
        cv2.imshow("Cropped image", cropped_image)
        histogram_farray = np.bincount(cropped_image.flatten(), minlength=256)
        num_fpixels = np.sum(histogram_farray)
        histogram_farray = histogram_farray/num_fpixels
        mean = 0
        variance = 0
        for i in range(len(histogram_farray)):
            mean += i * histogram_farray[i]
            variance += ((i - mean)**2) *(histogram_farray[i])
        stdDev = math.sqrt(variance)
        self.lineEditMean.setText(str(mean))
        self.lineEditVariance.setText(str(stdDev))
        self.graphicsViewHistogram.canvas.axes.clear()
        self.graphicsViewHistogram.canvas.axes.bar(range(256),histogram_farray)
        self.graphicsViewHistogram.canvas.draw()
    
    def selectROIFromGaussian(self):
        arr = self.add_gaussian_noise()
        savedImg = cv2.imwrite('m3rfsh.jpg', arr)
        img = cv2.imread('m3rfsh.jpg',1)
        # Select ROI
        r = cv2.selectROI("select the area", np.uint8(arr))
        
        # Crop image
        cropped_image = img[int(r[1]):int(r[1]+r[3]),
                            int(r[0]):int(r[0]+r[2])]
        
        cv2.imshow("Cropped image", cropped_image)
        histogram_farray = np.bincount(cropped_image.flatten(), minlength=256)
        num_fpixels = np.sum(histogram_farray)
        histogram_farray = histogram_farray/num_fpixels
        mean = 0
        variance = 0
        for i in range(len(histogram_farray)):
            mean += i * histogram_farray[i]
            variance += ((i - mean)**2) *(histogram_farray[i])
        stdDev = math.sqrt(variance)
        self.lineEditMean.setText(str(mean))
        self.lineEditVariance.setText(str(stdDev))
        self.graphicsViewHistogram.canvas.axes.clear()
        self.graphicsViewHistogram.canvas.axes.bar(range(256),histogram_farray)
        self.graphicsViewHistogram.canvas.draw()
        
    def selectROIFromUniform(self):
        arr = self.add_uniform_noise()
        savedImg = cv2.imwrite('m3rfsh.jpg', arr)
        img = cv2.imread('m3rfsh.jpg',1)
        # Select ROI
        r = cv2.selectROI("select the area", np.uint8(arr))
        
        # Crop image
        cropped_image = img[int(r[1]):int(r[1]+r[3]),
                            int(r[0]):int(r[0]+r[2])]
        cv2.imshow("Cropped image", cropped_image)
        histogram_farray = np.bincount(cropped_image.flatten(), minlength=256)
        num_fpixels = np.sum(histogram_farray)
        histogram_farray = histogram_farray/num_fpixels
        mean = 0
        variance = 0
        for i in range(len(histogram_farray)):
            mean += i * histogram_farray[i]
            variance += ((i - mean)**2) *(histogram_farray[i])
        stdDev = math.sqrt(variance)
        self.lineEditMean.setText(str(mean))
        self.lineEditVariance.setText(str(stdDev))
        self.graphicsViewHistogram.canvas.axes.clear()
        self.graphicsViewHistogram.canvas.axes.bar(range(256),histogram_farray)
        self.graphicsViewHistogram.canvas.draw()

    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.pushButtonAddNoise.setText(_translate("GroupBox", "Add Noise"))
        self.pushButtonSelect.setText(_translate("GroupBox", "Select Rectangle"))
        self.pushButtonAddNoise_2.setText(_translate("GroupBox", "Add Noise"))
        self.pushButtonSelect_2.setText(_translate("GroupBox", "Select Rectangle"))
        self.pushButtonSelect_3.setText(_translate("GroupBox", "Select Rectangle"))
from mplwidget import MplWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
