# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'initial_Design.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap, QImage
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import matplotlib.image as mpimg
import math


class Ui_ImageInterpolation(object):
    def setupUi(self, ImageInterpolation):
        ImageInterpolation.setObjectName("ImageInterpolation")
        ImageInterpolation.resize(994, 802)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(ImageInterpolation)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.tabWidget = QtWidgets.QTabWidget(ImageInterpolation)
        self.tabWidget.setObjectName("tabWidget")
        self.view = QtWidgets.QWidget()
        self.view.setObjectName("view")
        self.verticalLayout_79 = QtWidgets.QVBoxLayout(self.view)
        self.verticalLayout_79.setObjectName("verticalLayout_79")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.pushButtonOpenImage = QtWidgets.QPushButton(self.view)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButtonOpenImage.setFont(font)
        self.pushButtonOpenImage.setObjectName("pushButtonOpenImage")
        self.verticalLayout_15.addWidget(self.pushButtonOpenImage)
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.imageViewer = QtWidgets.QLabel(self.view)
        self.imageViewer.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.imageViewer.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.imageViewer.setText("")
        self.imageViewer.setScaledContents(True)
        self.imageViewer.setObjectName("imageViewer")
        self.verticalLayout_16.addWidget(self.imageViewer)
        self.verticalLayout_15.addLayout(self.verticalLayout_16)
        self.verticalLayout_14.addLayout(self.verticalLayout_15)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_38 = QtWidgets.QVBoxLayout()
        self.verticalLayout_38.setObjectName("verticalLayout_38")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.verticalLayout_39 = QtWidgets.QVBoxLayout()
        self.verticalLayout_39.setObjectName("verticalLayout_39")
        self.labelWidth = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelWidth.setFont(font)
        self.labelWidth.setObjectName("labelWidth")
        self.verticalLayout_39.addWidget(self.labelWidth)
        self.width = QtWidgets.QLineEdit(self.view)
        self.width.setObjectName("width")
        self.verticalLayout_39.addWidget(self.width)
        self.horizontalLayout_8.addLayout(self.verticalLayout_39)
        self.verticalLayout_40 = QtWidgets.QVBoxLayout()
        self.verticalLayout_40.setObjectName("verticalLayout_40")
        self.labelHeight = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelHeight.setFont(font)
        self.labelHeight.setObjectName("labelHeight")
        self.verticalLayout_40.addWidget(self.labelHeight)
        self.height = QtWidgets.QLineEdit(self.view)
        self.height.setObjectName("height")
        self.verticalLayout_40.addWidget(self.height)
        self.horizontalLayout_8.addLayout(self.verticalLayout_40)
        self.verticalLayout_38.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.verticalLayout_41 = QtWidgets.QVBoxLayout()
        self.verticalLayout_41.setObjectName("verticalLayout_41")
        self.labelTotalSize = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelTotalSize.setFont(font)
        self.labelTotalSize.setObjectName("labelTotalSize")
        self.verticalLayout_41.addWidget(self.labelTotalSize)
        self.totalSize = QtWidgets.QLineEdit(self.view)
        self.totalSize.setObjectName("totalSize")
        self.verticalLayout_41.addWidget(self.totalSize)
        self.horizontalLayout_20.addLayout(self.verticalLayout_41)
        self.verticalLayout_72 = QtWidgets.QVBoxLayout()
        self.verticalLayout_72.setObjectName("verticalLayout_72")
        self.labelBitDepth = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelBitDepth.setFont(font)
        self.labelBitDepth.setObjectName("labelBitDepth")
        self.verticalLayout_72.addWidget(self.labelBitDepth)
        self.bitDepth = QtWidgets.QLineEdit(self.view)
        self.bitDepth.setObjectName("bitDepth")
        self.verticalLayout_72.addWidget(self.bitDepth)
        self.horizontalLayout_20.addLayout(self.verticalLayout_72)
        self.verticalLayout_38.addLayout(self.horizontalLayout_20)
        self.verticalLayout.addLayout(self.verticalLayout_38)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.verticalLayout_73 = QtWidgets.QVBoxLayout()
        self.verticalLayout_73.setObjectName("verticalLayout_73")
        self.labelImageColor = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelImageColor.setFont(font)
        self.labelImageColor.setObjectName("labelImageColor")
        self.verticalLayout_73.addWidget(self.labelImageColor)
        self.ImageColor = QtWidgets.QLineEdit(self.view)
        self.ImageColor.setObjectName("ImageColor")
        self.verticalLayout_73.addWidget(self.ImageColor)
        self.converToGreyscale = QtWidgets.QPushButton(self.view)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.converToGreyscale.setFont(font)
        self.converToGreyscale.setObjectName("converToGreyscale")
        self.verticalLayout_73.addWidget(self.converToGreyscale)
        self.horizontalLayout_21.addLayout(self.verticalLayout_73)
        self.verticalLayout.addLayout(self.horizontalLayout_21)
        self.verticalLayout_74 = QtWidgets.QVBoxLayout()
        self.verticalLayout_74.setObjectName("verticalLayout_74")
        self.labelDicom = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelDicom.setFont(font)
        self.labelDicom.setObjectName("labelDicom")
        self.verticalLayout_74.addWidget(self.labelDicom)
        self.verticalLayout_75 = QtWidgets.QVBoxLayout()
        self.verticalLayout_75.setObjectName("verticalLayout_75")
        self.labelModality = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelModality.setFont(font)
        self.labelModality.setObjectName("labelModality")
        self.verticalLayout_75.addWidget(self.labelModality)
        self.modality = QtWidgets.QLineEdit(self.view)
        self.modality.setObjectName("modality")
        self.verticalLayout_75.addWidget(self.modality)
        self.verticalLayout_74.addLayout(self.verticalLayout_75)
        self.verticalLayout_76 = QtWidgets.QVBoxLayout()
        self.verticalLayout_76.setObjectName("verticalLayout_76")
        self.labelPatientName = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelPatientName.setFont(font)
        self.labelPatientName.setObjectName("labelPatientName")
        self.verticalLayout_76.addWidget(self.labelPatientName)
        self.patientName = QtWidgets.QLineEdit(self.view)
        self.patientName.setObjectName("patientName")
        self.verticalLayout_76.addWidget(self.patientName)
        self.verticalLayout_74.addLayout(self.verticalLayout_76)
        self.verticalLayout_77 = QtWidgets.QVBoxLayout()
        self.verticalLayout_77.setObjectName("verticalLayout_77")
        self.labelPatienAge = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelPatienAge.setFont(font)
        self.labelPatienAge.setObjectName("labelPatienAge")
        self.verticalLayout_77.addWidget(self.labelPatienAge)
        self.patientAge = QtWidgets.QLineEdit(self.view)
        self.patientAge.setObjectName("patientAge")
        self.verticalLayout_77.addWidget(self.patientAge)
        self.verticalLayout_74.addLayout(self.verticalLayout_77)
        self.verticalLayout_78 = QtWidgets.QVBoxLayout()
        self.verticalLayout_78.setObjectName("verticalLayout_78")
        self.labelBodyPartExamined = QtWidgets.QLabel(self.view)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.labelBodyPartExamined.setFont(font)
        self.labelBodyPartExamined.setObjectName("labelBodyPartExamined")
        self.verticalLayout_78.addWidget(self.labelBodyPartExamined)
        self.bodyPartExamined = QtWidgets.QLineEdit(self.view)
        self.bodyPartExamined.setObjectName("bodyPartExamined")
        self.verticalLayout_78.addWidget(self.bodyPartExamined)
        self.verticalLayout_74.addLayout(self.verticalLayout_78)
        self.verticalLayout.addLayout(self.verticalLayout_74)
        self.verticalLayout_14.addLayout(self.verticalLayout)
        self.verticalLayout_79.addLayout(self.verticalLayout_14)
        self.tabWidget.addTab(self.view, "")
        self.interpolation_tap = QtWidgets.QWidget()
        self.interpolation_tap.setObjectName("interpolation_tap")
        self.verticalLayout_87 = QtWidgets.QVBoxLayout(self.interpolation_tap)
        self.verticalLayout_87.setObjectName("verticalLayout_87")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.linearDimensionsBeafor = QtWidgets.QLineEdit(
            self.interpolation_tap)
        self.linearDimensionsBeafor.setObjectName("linearDimensionsBeafor")
        self.verticalLayout_2.addWidget(self.linearDimensionsBeafor)
        self.imageViewerLinear_2 = QtWidgets.QLabel(self.interpolation_tap)
        self.imageViewerLinear_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.imageViewerLinear_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.imageViewerLinear_2.setText("")
        self.imageViewerLinear_2.setScaledContents(True)
        self.imageViewerLinear_2.setObjectName("imageViewerLinear_2")
        self.verticalLayout_2.addWidget(self.imageViewerLinear_2)
        self.labelLinear = QtWidgets.QLabel(self.interpolation_tap)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.labelLinear.setFont(font)
        self.labelLinear.setFrameShape(QtWidgets.QFrame.Box)
        self.labelLinear.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelLinear.setTextFormat(QtCore.Qt.AutoText)
        self.labelLinear.setObjectName("labelLinear")
        self.verticalLayout_2.addWidget(self.labelLinear)
        self.zoomingFactor = QtWidgets.QLineEdit(self.interpolation_tap)
        self.zoomingFactor.setObjectName("zoomingFactor")
        self.verticalLayout_2.addWidget(self.zoomingFactor)
        self.applyZoom = QtWidgets.QPushButton(self.interpolation_tap)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.applyZoom.setFont(font)
        self.applyZoom.setObjectName("applyZoom")
        self.verticalLayout_2.addWidget(self.applyZoom)
        self.linearDimensionsAfter = QtWidgets.QLineEdit(
            self.interpolation_tap)
        self.linearDimensionsAfter.setObjectName("linearDimensionsAfter")
        self.verticalLayout_2.addWidget(self.linearDimensionsAfter)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.nearestDimensionsBefore = QtWidgets.QLineEdit(
            self.interpolation_tap)
        self.nearestDimensionsBefore.setObjectName("nearestDimensionsBefore")
        self.verticalLayout_3.addWidget(self.nearestDimensionsBefore)
        self.imageViewerLinear = QtWidgets.QLabel(self.interpolation_tap)
        self.imageViewerLinear.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.imageViewerLinear.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.imageViewerLinear.setText("")
        self.imageViewerLinear.setScaledContents(True)
        self.imageViewerLinear.setObjectName("imageViewerLinear")
        self.verticalLayout_3.addWidget(self.imageViewerLinear)
        self.labelNearest = QtWidgets.QLabel(self.interpolation_tap)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.labelNearest.setFont(font)
        self.labelNearest.setFrameShape(QtWidgets.QFrame.Box)
        self.labelNearest.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNearest.setTextFormat(QtCore.Qt.AutoText)
        self.labelNearest.setObjectName("labelNearest")
        self.verticalLayout_3.addWidget(self.labelNearest)
        self.zoomingFactor_2 = QtWidgets.QLineEdit(self.interpolation_tap)
        self.zoomingFactor_2.setObjectName("zoomingFactor_2")
        self.verticalLayout_3.addWidget(self.zoomingFactor_2)
        self.applyZoom_2 = QtWidgets.QPushButton(self.interpolation_tap)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.applyZoom_2.setFont(font)
        self.applyZoom_2.setObjectName("applyZoom_2")
        self.verticalLayout_3.addWidget(self.applyZoom_2)
        self.nearestDimensionsAfter = QtWidgets.QLineEdit(
            self.interpolation_tap)
        self.nearestDimensionsAfter.setObjectName("nearestDimensionsAfter")
        self.verticalLayout_3.addWidget(self.nearestDimensionsAfter)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout_87.addLayout(self.horizontalLayout)
        self.tabWidget.addTab(self.interpolation_tap, "")
        self.verticalLayout_6.addWidget(self.tabWidget)

        self.retranslateUi(ImageInterpolation)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(ImageInterpolation)
        
        #Connections

        self.pushButtonOpenImage.clicked.connect(self.Browse)
        self.converToGreyscale.clicked.connect(self.convertToGreyscale)
        self.applyZoom.clicked.connect(self.biLinearInterpolation)
        self.applyZoom_2.clicked.connect(self.nearestNeighborInterpolation)

    #Browse and view the image
        
    def Browse(self):
        self.clearData()
        self.zoomFactorsHint()

        self.fileName, self.extentions = QFileDialog.getOpenFileName(
            None, "Choose an image",
            "C:/",
            "Images (*.jpg *.bmp *.dcm)")
        self.file = self.fileName
        if ('.dcm' in self.fileName):
            try:
                # Read and parse a DICOM dataset
                self.dcmHeader = dicom.dcmread(self.fileName)
            # Display data as an image
                self.dcmHeaderArr = self.dcmHeader.pixel_array.astype(float)
                self.rescaledImage = (np.maximum(
                    self.dcmHeaderArr, 0)/self.dcmHeaderArr.max()) * 255.0  # float pixel
                self.finalImage = np.uint8(self.rescaledImage)  # Integer Pixel
                self.finalImage = Image.fromarray(self.finalImage)
                self.finalImage.save('image.jpg')
                self.dynamicPath = os.getcwd()
                self.fileName = self.dynamicPath + '\image.jpg'
                self.dcmImageForConvert = Image.open(self.fileName)
                self.pixMap = QPixmap(self.fileName)
                self.imageViewer.setPixmap(self.pixMap)
                # self.imageViewerLinear.setPixmap(self.pixMap)
                # self.imageViewerLinear_2.setPixmap(self.pixMap)
                self.imageViewer.setScaledContents(True)
                self.showDicomMetaData()
            except:
                print('DICOM file missing meta data')
        else:
            try:
                print(self.fileName)
                self.pixMap = QPixmap(self.fileName)
                self.imageViewer.setPixmap(self.pixMap)
                # self.imageViewerLinear.setPixmap(self.pixMap)
                # self.imageViewerLinear_2.setPixmap(self.pixMap)
                self.imageViewer.setScaledContents(True)
                self.showMetaData()
            except:
                print('Corrupt File')
                
    #Show DICOM data
    
    def showDicomMetaData(self):
        try:
            """Getting the image normal data from the header"""
            self.dcmWidth = self.dcmHeader["Columns"]
            self.dcmHeight = self.dcmHeader["Rows"]
            self.width.setText(str(self.dcmWidth.value))
            self.height.setText(str(self.dcmHeight.value))
            self.dcmBitDepth = self.dcmHeader["BitsAllocated"]
            self.bitDepth.setText(str(self.dcmBitDepth.value))
            self.totalSize.setText(
                str(self.dcmWidth.value * self.dcmHeight.value * self.dcmBitDepth.value))
            try:
                self.dcmColor = self.dcmHeader["PhotometricInterpretation"]
                self.ImageColor.setText(self.dcmColor.value)
            except:
                self.ImageColor.setText('Not Found')
            try:
                self.dcmModality = self.dcmHeader["Modality"]
                self.modality.setText(self.dcmModality.value)
            except:
                self.modality.setText("Not Found")
            try:
                self.dcmPatientName = self.dcmHeader["PatientName"]
                self.patientName.setText(self.dcmPatientName.value)
            except:
                self.patientName.setText('Not Found')
            try:
                self.dcmPatientAge = self.dcmHeader["PatientAge"]
                self.patientAge.setText(self.dcmPatientAge.value)
            except:
                self.patientAge.setText('Not Found')
            try:
                self.dcmExaminedPart = self.dcmHeader["BodyPartExamined"]
                self.bodyPartExamined.setText(self.dcmExaminedPart.value)
            except:
                self.bodyPartExamined.setText('Not Found')
        except:
            print("Something is wrong")

    #Show normal image data
    
    def showMetaData(self):
        # returns an object of the image that can be read
        self.img = Image.open(self.fileName)
        self.img_np = np.asarray(self.img)
        if (len(self.img_np.shape) == 2):
            self.channels = 1
        elif (len(self.img_np.shape) == 3):
            self.channels = self.img_np.shape[2]
        self.width.setText(str(self.img.width))
        self.height.setText(str(self.img.height))
        self.min = int(np.amin(self.img))
        self.max = int(np.amax(self.img))
        self.bit_depth = (
            np.ceil(np.log2(self.max-self.min+1)))*self.channels
        self.bitDepth.setText(str(self.bit_depth))
        self.totalSize.setText(
            str(self.img.width * self.img.height * self.bit_depth))
        self.imgColorString = self.img.mode
        if (self.imgColorString) == 'RGB':
            self.ImageColor.setText('RGB')
        elif (self.imgColorString) == 'L':
            self.ImageColor.setText('Greyscale')
        elif (self.imgColorString) == '1':
            self.ImageColor.setText('Binary')
        else:
            self.ImageColor.setText(self.imgColorString)

    #Convert image to greyscale
    
    def convertToGreyscale(self):
        try:
            self.imge = mpimg.imread(self.file)
            R, G, B = self.imge[:, :, 0], self.imge[:,
                                                    :, 1], self.imge[:, :, 2]
            self.imgGray = 0.2989 * R + 0.5870 * G + 0.1140 * B
            self.im = Image.fromarray(np.uint8(self.imgGray))
            self.qimg = self.im.toqpixmap()
            self.imageViewerLinear.clear()
            self.imageViewerLinear.setPixmap(self.qimg)
            self.imageViewerLinear_2.setPixmap(self.qimg)
        except:
            self.imageViewerLinear.setPixmap(self.pixMap)
            self.imageViewerLinear_2.setPixmap(self.pixMap)

    # To clear the text boxex and the figure

    #Clearing the labels

    def clearData(self):
        #self.imageViewer.setText("Please choose a non-corrupted image")
        self.height.clear()
        self.width.clear()
        self.totalSize.clear()
        self.bitDepth.clear()
        self.bodyPartExamined.clear()
        self.patientName.clear()
        self.patientAge.clear()
        self.modality.clear()
        self.ImageColor.clear()
        self.nearestDimensionsBefore.clear()
        self.nearestDimensionsAfter.clear()
        self.linearDimensionsBeafor.clear()
        self.linearDimensionsAfter
        self.zoomingFactor.clear()
        self.zoomingFactor_2.clear()

    #A placeholder for the zoome line edit
    
    def zoomFactorsHint(self):
        self.zoomingFactor.setPlaceholderText('Please enter a zooming factor')
        self.zoomingFactor_2.setPlaceholderText(
            'Please enter a zooming factor')
        
    #Nearest-Neighbor interpolation    
    
    def nearestNeighborInterpolation(self):
        try:
            self.nearestFactor = float(self.zoomingFactor_2.text())
            if self.nearestFactor <= 0:
                self.zoomingFactor_2.setText("Cannot apply zooming")
            else:
                if '.dcm' in self.file:
                    self.dcmImageForConvert = self.dcmImageForConvert.convert(
                        "L")
                    self.originalImageMatrix = np.asarray(
                        self.dcmImageForConvert)
                    self.originalDiminsions = self.dcmImageForConvert.size
                    self.newSize = (self.nearestFactor *
                                    self.originalDiminsions[0], self.nearestFactor *
                                    self.originalDiminsions[1])
                    self.nearestDimensionsBefore.setText(
                        str(self.originalDiminsions))
                    self.nearestDimensionsAfter.setText(str(self.newSize))
                    self.rowRatio = np.array(
                        self.nearestFactor * self.originalDiminsions[0]) / np.array(self.originalDiminsions)
                    self.colRatio = np.array(
                        self.nearestFactor * self.originalDiminsions[1]) / np.array(self.originalDiminsions)
                    self.rowIndex = (np.ceil(range(
                        1, 1 + int(self.originalDiminsions[0]*self.rowRatio[0]))/self.rowRatio[0]) - 1).astype(int)
                    self.columnIndex = (np.ceil(range(
                        1, 1 + int(self.originalDiminsions[1]*self.colRatio[0]))/self.colRatio[0]) - 1).astype(int)
                    self.finalMatrix = self.originalImageMatrix[:,
                                                                self.rowIndex][self.columnIndex, :]
                    self.im = Image.fromarray(np.uint8(self.finalMatrix))
                    self.qimg = self.im.toqpixmap()
                    self.imageViewerLinear.clear()
                    self.imageViewerLinear.setPixmap(self.qimg)
                else:
                    self.Nimg = self.img.convert("L")
                    self.originalImageMatrix = np.asarray(self.Nimg)
                    self.originalDiminsions = self.img.size
                    self.newSize = (self.nearestFactor *
                                    self.originalDiminsions[0], self.nearestFactor *
                                    self.originalDiminsions[1])
                    self.nearestDimensionsBefore.setText(
                        str(self.originalDiminsions))
                    self.nearestDimensionsAfter.setText(str(self.newSize))
                    self.rowRatio = np.array(
                        self.nearestFactor * self.originalDiminsions[0]) / np.array(self.originalDiminsions)
                    self.colRatio = np.array(
                        self.nearestFactor * self.originalDiminsions[1]) / np.array(self.originalDiminsions)
                    self.rowIndex = (np.ceil(range(
                        1, 1 + int(self.originalDiminsions[0]*self.rowRatio[0]))/self.rowRatio[0]) - 1).astype(int)
                    self.columnIndex = (np.ceil(range(
                        1, 1 + int(self.originalDiminsions[1]*self.colRatio[0]))/self.colRatio[0]) - 1).astype(int)
                    self.finalMatrix = self.originalImageMatrix[:,
                                                                self.rowIndex][self.columnIndex, :]
                    self.savedImage = Image.fromarray(self.finalMatrix)
                    self.savedImage.save('imageNearestNeighbor.jpg')
                    self.dynamicPath = os.getcwd()
                    self.fileName = self.dynamicPath + '\imageNearestNeighbor.jpg'
                    self.pixMap = QPixmap(self.fileName)
                    self.imageViewerLinear.setPixmap(self.pixMap)
        except:
            self.zoomingFactor_2.setText("Something went wrong")

    #Bilinear Interpolation
    
    def biLinearInterpolation(self):
        try:
            self.linearFactor = float(self.zoomingFactor.text())
            if self.linearFactor <= 0:
                self.zoomingFactor.setText("Cannot apply zooming")
            else:
                if ".dcm" in self.file:
                    self.Limage  = self.dcmImageForConvert.convert("L")
                else:
                    self.Limage = self.img.convert("L")
                self.originalImageMatrix = np.asarray(self.Limage)
                self.oldSizeL = self.Limage.size
                # create an array of the desired shape.
                new_h=int(self.oldSizeL[1]*self.linearFactor)
                new_w=int(self.oldSizeL[0]*self.linearFactor)
                self.newSizeL = (new_h,new_w)
                self.resized = np.zeros((new_h, new_w))
                self.linearDimensionsBeafor.setText(
                        str(self.oldSizeL))
                self.linearDimensionsAfter.setText(str(self.newSizeL))
                # Calculate width and height scaling factors
                w_scale_factor = (self.oldSizeL[0]) / (new_w) if new_h != 0 else 0
                h_scale_factor = (self.oldSizeL[1]) / (new_h) if new_w != 0 else 0
                for i in range(new_h):
                    for j in range(new_w):
                        # map the coordinates back to the original image
                        x = i * h_scale_factor
                        y = j * w_scale_factor
                        # calculate the coordinate values for 4 surrounding pixels.
                        x_floor = math.floor(x)
                        x_ceil = min(self.oldSizeL[1] - 1, math.ceil(x))
                        y_floor = math.floor(y)
                        y_ceil = min(self.oldSizeL[0] - 1, math.ceil(y))
                        #print(self.Limage)
                        # get the neighbouring pixel values
                        val1 = self.originalImageMatrix[x_floor, y_floor]
                        val2 = self.originalImageMatrix[x_ceil, y_floor]
                        val3 = self.originalImageMatrix[x_floor, y_ceil]
                        val4 = self.originalImageMatrix[x_ceil, y_ceil]
                        #Check if the calculated pixel exsits in the original image
                        if (x_ceil == x_floor) and (y_ceil == y_floor):
                            q = self.originalImageMatrix[int(x), int(y)]
                        #Check if the calculated pixel exsits in the x-axis of original image
                        elif (x_ceil == x_floor):
                            q1 = self.originalImageMatrix[int(x), int(y_floor)]
                            q2 = self.originalImageMatrix[int(x), int(y_ceil)]
                            q = q1 * (y_ceil - y) + q2 * (y - y_floor)
                        #Check if the calculated pixel exsits in the y-axis of original image
                        elif (y_ceil == y_floor):
                            q1 = self.originalImageMatrix[int(x_floor), int(y)]
                            q2 = self.originalImageMatrix[int(x_ceil), int(y)]
                            q = (q1 * (x_ceil - x)) + (q2 * (x - x_floor))
                        # Estimate the pixel value q using pixel values of neighbours
                        else:
                            q1 = val1 * (x_ceil - x) + val2 * (x - x_floor)
                            q2 = val3 * (x_ceil - x) + val4 * (x - x_floor)
                            q = q1 * (y_ceil - y) + q2 * (y - y_floor)
                        self.resized[i,j]=q
                self.finalImage = self.resized.astype(float)
                self.im = Image.fromarray(np.uint8(self.finalImage))
                self.qimg = self.im.toqpixmap()
                self.imageViewerLinear_2.clear()
                self.imageViewerLinear_2.setPixmap(self.qimg)
        except:
            self.zoomingFactor.setText("Something is wrong")

    def retranslateUi(self, ImageInterpolation):
        _translate = QtCore.QCoreApplication.translate
        ImageInterpolation.setWindowTitle(
            _translate("ImageInterpolation", "GroupBox"))
        self.pushButtonOpenImage.setText(
            _translate("ImageInterpolation", "Open an image"))
        self.labelWidth.setText(_translate("ImageInterpolation", "Width"))
        self.labelHeight.setText(_translate("ImageInterpolation", "Height"))
        self.labelTotalSize.setText(_translate(
            "ImageInterpolation", "Total size in bits"))
        self.labelBitDepth.setText(_translate(
            "ImageInterpolation", "Bit depth"))
        self.labelImageColor.setText(_translate(
            "ImageInterpolation", "Image color:"))
        self.converToGreyscale.setText(_translate(
            "ImageInterpolation", "Convert to greyscale"))
        self.labelDicom.setText(_translate(
            "ImageInterpolation", "Info For DICOM Images Only"))
        self.labelModality.setText(_translate(
            "ImageInterpolation", "Modality"))
        self.labelPatientName.setText(_translate(
            "ImageInterpolation", "PatientName"))
        self.labelPatienAge.setText(_translate(
            "ImageInterpolation", "PatientAge"))
        self.labelBodyPartExamined.setText(_translate(
            "ImageInterpolation", "BodyPartExamined"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.view), _translate("ImageInterpolation", "View"))
        self.labelLinear.setText(_translate(
            "ImageInterpolation", "Linear interpolation"))
        self.applyZoom.setText(_translate("ImageInterpolation", "Apply"))
        self.labelNearest.setText(_translate(
            "ImageInterpolation", "Nearest-neighbor interpolation"))
        self.applyZoom_2.setText(_translate("ImageInterpolation", "Apply"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.interpolation_tap), _translate("ImageInterpolation", "Interpolation"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ImageInterpolation = QtWidgets.QGroupBox()
    ui = Ui_ImageInterpolation()
    ui.setupUi(ImageInterpolation)
    ImageInterpolation.show()
    sys.exit(app.exec_())
