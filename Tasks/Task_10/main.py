# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'First.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
from PIL import Image
import numpy as np
import os
import pydicom as dicom
import math
import random

class Ui_GroupBox(object):
    def setupUi(self, GroupBox):
        GroupBox.setObjectName("GroupBox")
        GroupBox.resize(1233, 847)
        self.labelNoisyImage = QtWidgets.QLabel(GroupBox)
        self.labelNoisyImage.setGeometry(QtCore.QRect(20, 30, 381, 321))
        self.labelNoisyImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage.setText("")
        self.labelNoisyImage.setScaledContents(True)
        self.labelNoisyImage.setObjectName("labelNoisyImage")
        self.labelDenoisedImage = QtWidgets.QLabel(GroupBox)
        self.labelDenoisedImage.setGeometry(QtCore.QRect(440, 30, 361, 321))
        self.labelDenoisedImage.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelDenoisedImage.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelDenoisedImage.setText("")
        self.labelDenoisedImage.setScaledContents(True)
        self.labelDenoisedImage.setObjectName("labelDenoisedImage")
        self.label = QtWidgets.QLabel(GroupBox)
        self.label.setGeometry(QtCore.QRect(170, 360, 121, 20))
        self.label.setObjectName("label")
        self.pushButtonErosion = QtWidgets.QPushButton(GroupBox)
        self.pushButtonErosion.setGeometry(QtCore.QRect(590, 370, 93, 28))
        self.pushButtonErosion.setObjectName("pushButtonErosion")
        self.pushButtonDilation = QtWidgets.QPushButton(GroupBox)
        self.pushButtonDilation.setGeometry(QtCore.QRect(990, 370, 93, 28))
        self.pushButtonDilation.setObjectName("pushButtonDilation")
        self.labelNoisyImage_3 = QtWidgets.QLabel(GroupBox)
        self.labelNoisyImage_3.setGeometry(QtCore.QRect(830, 30, 381, 321))
        self.labelNoisyImage_3.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage_3.setText("")
        self.labelNoisyImage_3.setScaledContents(True)
        self.labelNoisyImage_3.setObjectName("labelNoisyImage_3")
        self.labelNoisyImage_2 = QtWidgets.QLabel(GroupBox)
        self.labelNoisyImage_2.setGeometry(QtCore.QRect(10, 480, 381, 321))
        self.labelNoisyImage_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage_2.setText("")
        self.labelNoisyImage_2.setScaledContents(True)
        self.labelNoisyImage_2.setObjectName("labelNoisyImage_2")
        self.labelNoisyImage_4 = QtWidgets.QLabel(GroupBox)
        self.labelNoisyImage_4.setGeometry(QtCore.QRect(420, 480, 381, 321))
        self.labelNoisyImage_4.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage_4.setText("")
        self.labelNoisyImage_4.setScaledContents(True)
        self.labelNoisyImage_4.setObjectName("labelNoisyImage_4")
        self.labelNoisyImage_5 = QtWidgets.QLabel(GroupBox)
        self.labelNoisyImage_5.setGeometry(QtCore.QRect(820, 480, 381, 321))
        self.labelNoisyImage_5.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.labelNoisyImage_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.labelNoisyImage_5.setText("")
        self.labelNoisyImage_5.setScaledContents(True)
        self.labelNoisyImage_5.setObjectName("labelNoisyImage_5")
        self.pushButtonOpening = QtWidgets.QPushButton(GroupBox)
        self.pushButtonOpening.setGeometry(QtCore.QRect(160, 440, 93, 28))
        self.pushButtonOpening.setObjectName("pushButtonOpening")
        self.pushButtonClosing = QtWidgets.QPushButton(GroupBox)
        self.pushButtonClosing.setGeometry(QtCore.QRect(580, 440, 93, 28))
        self.pushButtonClosing.setObjectName("pushButtonClosing")
        self.pushButtonDenoise = QtWidgets.QPushButton(GroupBox)
        self.pushButtonDenoise.setGeometry(QtCore.QRect(1020, 440, 93, 28))
        self.pushButtonDenoise.setObjectName("pushButtonDenoise")

        self.retranslateUi(GroupBox)
        QtCore.QMetaObject.connectSlotsByName(GroupBox)
        self.originalImage()

    def originalImage(self):
        self.img = Image.open(r"binary_image.png")
        self.img = self.img.convert("L")
        img_np = np.asarray(self.img)
        self.finalPixels = Image.fromarray(img_np)
        self.qimg = self.finalPixels.toqpixmap()
        self.labelNoisyImage.clear()
        self.labelNoisyImage.setPixmap(self.qimg)
        
        structure=np.array([[0,1,1,1,0],
                  [1,1,1,1,1],
                  [1,1,1,1,1],
                  [1,1,1,1,1],
                  [0,1,1,1,0]],dtype=np.uint8)
        structureBonus=np.array([
                [1,1,1],
                [1,1,1],
                [1,1,1]])
        
        
        #erosion
        eroImage = self.erosion(img_np,structure)
        self.grImage = Image.fromarray(np.uint8(eroImage))
        self.eroimg = self.grImage.toqpixmap()
        self.labelDenoisedImage.clear()
        self.labelDenoisedImage.setPixmap(self.eroimg)
        
        #dilation
        self.dilImage = self.dilation(img_np,structure)
        self.grImage = Image.fromarray(np.uint8(self.dilImage))
        self.eroimg = self.grImage.toqpixmap()
        self.labelNoisyImage_3.clear()
        self.labelNoisyImage_3.setPixmap(self.eroimg)
        
        #opening
        openedImage = self.dilation(eroImage,structure)
        self.grImage = Image.fromarray(np.uint8(openedImage))
        self.eroimg = self.grImage.toqpixmap()
        self.labelNoisyImage_2.clear()
        self.labelNoisyImage_2.setPixmap(self.eroimg)
        
        #closing
        closedImage = self.erosion(self.dilImage,structure)
        self.grImage = Image.fromarray(np.uint8(closedImage))
        self.eroimg = self.grImage.toqpixmap()
        self.labelNoisyImage_4.clear()
        self.labelNoisyImage_4.setPixmap(self.eroimg)
        
        #bonus
        eroClosedImage = self.erosionBonus(img_np,structureBonus)
        ilteredImage = self.dilation(eroClosedImage,structureBonus)
        diImage = self.dilation(ilteredImage,structureBonus)
        filteredImage = self.erosionBonus(diImage,structureBonus)
        self.grImage = Image.fromarray(np.uint8(filteredImage))
        self.eroimg = self.grImage.toqpixmap()
        self.labelNoisyImage_5.clear()
        self.labelNoisyImage_5.setPixmap(self.eroimg) 
        
    def erosion(self,img1,strucElement):
        m,n= img1.shape 
        constant= (strucElement.shape[0]-1)//2
        imgErode= np.zeros((m,n), dtype=np.uint8)
        for i in range(constant, m-constant):
            for j in range(constant,n-constant):
                temp= img1[i-constant:i+constant+1, j-constant:j+constant+1]
                product= temp*strucElement
                value = self.countOnes(product)
                imgErode[i,j] = value
        return imgErode
        
        
    def dilation(self,img1,strucElement):
        m,n= img1.shape 
        constant= (strucElement.shape[0]-1)//2
        dilatedImage= np.zeros((m,n), dtype=np.uint8)
        for i in range(constant, m-constant):
            for j in range(constant,n-constant):
                temp= img1[i-constant:i+constant+1, j-constant:j+constant+1]
                product= temp*strucElement
                value = self.countOnes1(product)
                dilatedImage[i,j] = value
        return dilatedImage
        
    def countOnes(self,array):
        count = 0
        for i in range (0,len(array)):
            for j in range (0,len(array)):
                if array[i,j] == 255:
                    count+=1
        if count==21:
            return 255
        return 0
    def countOnes1(self,array):
        count = 0
        for i in range (0,len(array)):
            for j in range (0,len(array)):
                if array[i,j] == 255:
                    count+=1
        if count > 0:
            return 255
        return 0
    
    def erosionBonus(self,img1,strucElement):
        m,n= img1.shape 
        constant= (strucElement.shape[0]-1)//2
        imgErode= np.zeros((m,n), dtype=np.uint8)
        for i in range(constant, m-constant):
            for j in range(constant,n-constant):
                temp= img1[i-constant:i+constant+1, j-constant:j+constant+1]
                product= temp*strucElement
                value = self.countOnesBonus(product)
                imgErode[i,j] = value
        return imgErode
    
    def countOnesBonus(self,array):
        count = 0
        for i in range (0,len(array)):
            for j in range (0,len(array)):
                if array[i,j] == 255:
                    count+=1
        if count==9:
            return 255
        return 0

    def retranslateUi(self, GroupBox):
        _translate = QtCore.QCoreApplication.translate
        GroupBox.setWindowTitle(_translate("GroupBox", "GroupBox"))
        self.label.setText(_translate("GroupBox", "Noisy Image"))
        self.pushButtonErosion.setText(_translate("GroupBox", "Apply Erosion"))
        self.pushButtonDilation.setText(_translate("GroupBox", "Apply Dilation"))
        self.pushButtonOpening.setText(_translate("GroupBox", "Apply Opening"))
        self.pushButtonClosing.setText(_translate("GroupBox", "Apply Closing"))
        self.pushButtonDenoise.setText(_translate("GroupBox", "De-noise"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    GroupBox = QtWidgets.QGroupBox()
    ui = Ui_GroupBox()
    ui.setupUi(GroupBox)
    GroupBox.show()
    sys.exit(app.exec_())
